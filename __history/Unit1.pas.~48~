unit Unit1;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, Vcl.ExtCtrls, Vcl.StdCtrls, Vcl.Menus, Vcl.ToolWin,
  Vcl.ComCtrls, Vcl.Samples.Spin, Vcl.Tabs, Vcl.CheckLst, Vcl.ActnMan,
  Vcl.ActnColorMaps, Vcl.ExtDlgs, Vcl.ImgList,
  Vcl.PlatformDefaultStyleActnCtrls, Vcl.ActnList, dglOpenGL, Unit2;

type

  TForm1 = class(TForm)
    Timer1: TTimer;
    procedure FormResize(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure IdleHandler(Sender: TObject; var Done : Boolean);
    procedure InitMode(M_type: integer);
    procedure FormCreate(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure FormHide(Sender: TObject);
    procedure FormPaint(Sender: TObject);
    procedure FormMouseMove(Sender: TObject; Shift: TShiftState; X, Y: Integer);
    procedure Timer1Timer(Sender: TObject);
    procedure FormMouseUp(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);
    procedure FormMouseDown(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);
    procedure menu;

  private
    { Private declarations }
    procedure SetupGL;
  //  procedure Draw;
  public
    { Public declarations }
    dc : HDC;
    hrc : HGLRC;
    rotation: real;
    bx,by:integer;
    createcontext: boolean;

  end;

const
  NearClipping = 0.1;    //Ближняя плоскость отсечения
  FarClipping  = 200;    //Дальняя плоскость отсечения
  g = 9.81;


type
  Rectangle=record
    x: real;
    y: real;
    width: integer;
    height: integer;
  end;

  Objects = record
  box : Rectangle;
  lives : integer;
  typei:integer;
  Ttype: integer;
  Collision: Boolean;
  draw: integer;
  end;



var
  Form1: TForm1;
  mode: integer=1;
  camera_x: extended=0.0;
  camera_y: extended;
  mouse_up: boolean=false;
  m_x, m_y,m_x1, m_y1: integer;
  mouse_down, mouse_move: boolean;
  box: rectangle;
  gameobj: array[1..5000] of objects;
  useSnap: boolean;
  snapstepy, snapstepx: integer;
  gobj_count: longint;
  filename: string='0';
  filelable: string='0';
  mouse_x, mouse_y : real;
    mouse_mx, mouse_my: real;
  tclick: boolean;
  ff: text;
  z:integer=1;
  k: integer; selected:boolean;
  k_s:integer;
  y,x,V0x, V0y, V0, a:real;
  t:int64;
  mxstat, mystat: integer;
  bw, bh: integer;



implementation

{$R *.dfm}

procedure TForm1.SetupGL;
begin

  glEnable(GL_DEPTH_TEST); //включить режим тест глубины
  glEnable(GL_CULL_FACE); //включить режим отображения только передних поверхностей
end;

procedure TForm1.Timer1Timer(Sender: TObject);
begin
  if ((GetKeyState(38) and 128)=128) or ((GetKeyState(39) and 128)=128) or ((GetKeyState(37) and 128)=128) then
  t:=t+1
  else t:=1;
end;

procedure TForm1.IdleHandler(Sender : TObject; var Done : Boolean);
begin
  Sleep(1);
  Done := False;
  FormPaint(Sender);
end;

procedure TForm1.InitMode(M_type: integer);      //Мы можем работать в двух режимах, либо в ортографическом либо в перспективной проекции
begin
  case M_type of
     1: begin
          glViewport(0,0,ClientWidth,ClientHeight);
          //установка видовой и проекционной матриц //
          glmatrixmode(GL_PROJECTION);        //работаем в режиме проекционной матрицы
          glloadidentity();                   //замещаем текущую матрицу не единичную
          glortho(0, ClientWidth, ClientHeight, 0, 0, 1); //заружаем ортогональную проекционную матрицу
          glmatrixmode(GL_MODELVIEW);         //работаем в режиме объектно-видовой матрицы
          glloadidentity();                   //заменяем текущую матрицу на единичную
          gltranslatef(0.375, 0.375, 0);      //смещаем текущую матрицу (хак, чтобы тексели попадали в пиксели)
          glDisable(GL_DEPTH_TEST);           //отключаем проверку буфера глубины
          glEnable(GL_CULL_FACE);             //включаем отсечение задних граней
          glCullFace(GL_BACK);                //отсекаться будут задние грани (повёрнутые задом к камере)
          glFrontFace(GL_CCW);                //верншины полигонов должны задаваться в порядке "против часовой стрелки"
          glShadeModel(GL_SMOOTH);            //устанавливаем модель шейдинга
        end;
     2: begin
          glViewport(0,0,ClientWidth,ClientHeight);
          glMatrixMode(GL_PROJECTION);
          glLoadIdentity;
          gluPerspective(45.0,ClientWidth/ClientHeight,NearClipping,FarClipping);
          glMatrixMode(GL_MODELVIEW);
          glLoadIdentity;
        end;
  end;

end;


procedure Scene_Draw();
var i:integer;
begin
  for I := 1 to 5000 do
    if gameobj[i].draw=1 then

    draw_quad(gameobj[i].box.x,
              gameobj[i].box.y,
              gameobj[i].box.width,
              gameobj[i].box.height);

end;

procedure TForm1.FormResize(Sender: TObject);
var
  tmpBool : Boolean;
begin
  InitMode(mode);
  idleHandler(Sender,tmpBool);
  FormPaint(Sender);
end;

procedure TForm1.FormClose(Sender: TObject; var Action: TCloseAction);
begin
	ShowWindow(Application.Handle, SW_HIDE);
end;

procedure TForm1.FormCreate(Sender: TObject);
begin
	Randomize;
   dc := GetDC(Form1.Handle); //получаем контекст устройства по форме Form1
  //с InitOpenGL инициализирцется OpenGL, если это не удается то приложение закрывается
  if  (not InitOpenGL)  then
    Application.Terminate;

  //эта строка создаёт контекст рендеринга
  hrc := CreateRenderingContext(dc,[opDoubleBuffered],32,24,0,0,0,0);

  ActivateRenderingContext(dc,hrc); //активируем контекст рендеринга
  SetupGL;                          //установка режимов OpenGL
  Application.OnIdle := IdleHandler;
  glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
  glEnable(GL_BLEND);
  glDisable(GL_COLOR_MATERIAL);

  ReleaseFont;
  x:=clientWidth/2;
  y:=clientheight/2;
  TextInit();
  gameobj[1].box.x:=100;
  gameobj[1].box.y:=200;
  gameobj[1].box.width:=600;
  gameobj[1].box.height:=20;

end;

procedure TForm1.FormDestroy(Sender: TObject);
begin
  DeactivateRenderingContext;
  DestroyRenderingContext(hrc);
  ReleaseDC(Handle,dc);

end;

procedure TForm1.FormHide(Sender: TObject);
begin
  ShowWindow(Application.Handle, SW_HIDE);
end;

procedure TForm1.FormMouseDown(Sender: TObject; Button: TMouseButton;
  Shift: TShiftState; X, Y: Integer);
begin
  tclick:=true;
end;

procedure TForm1.FormMouseMove(Sender: TObject; Shift: TShiftState; X,
  Y: Integer);
begin
    mouse_x:=x;
    mouse_y:=y;
end;

procedure TForm1.FormMouseUp(Sender: TObject; Button: TMouseButton;
  Shift: TShiftState; X, Y: Integer);
begin
  tclick:=false;
end;

procedure TForm1.FormPaint(Sender: TObject);
var p:boolean; l:real;   i:integer; m,n:real;
begin
    glClear(GL_COLOR_BUFFER_BIT or GL_DEPTH_BUFFER_BIT);
    InitMode(mode);
    glBindTexture(GL_TEXTURE_2D, Tex.gobject[2]);
    draw_quad(0,0,ClientWidth,ClientHeight);
   // TPrintText(floattostr(mouse_x),ClientWidth/2,ClientHeight/2,4,true,37);
   // TPrintText(floattostr(mouse_y),ClientWidth/2,ClientHeight/2+50,4,tclick,37);
	  p:=CreateButton(ClientWidth/2,ClientHeight/2, 20,'click button',4, ACENTER,
		tclick,  0, z ,37, CPURPLE, trunc(mouse_x), Trunc(mouse_y));
    if p=true then
    begin
     z:=0; p:=true;
     CreateButton(0,ClientHeight/5, 20,'start',4, ACENTERY,
		tclick,  0, 1 ,37, CPURPLE, trunc(mouse_x), Trunc(mouse_y));
    end;


    SwapBuffers(dc);

end;

procedure TForm1.menu;
var m,n,k,b,a:boolean;
begin
  m:=true;
end;

end.

